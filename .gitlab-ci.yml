variables:
  OPAM_SYS_DEPLOY_FOLDER_WINDOWS: 'C:\DiskuvOCaml\OpamSys'
  OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS: 'C:\DiskuvOCaml\OcamlOpamRepo'

.shared_windows_runners:
  # https://gitlab.com/gitlab-org/ci-cd/shared-runners/images/gcp/windows-containers/-/tree/main/cookbooks/preinstalled-software
  tags:
    - shared-windows
    - windows
    - windows-1809

.diskuv_windows_runners:
  # Capabilities:
  # - Windows 10
  # - official Git 2.33.0.2+ for Windows
  tags:
    - diskuv
    - windows
    - windows-1809

.before_windows: &before-windows
  - date
  - '[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12' # From https://www.msys2.org/docs/ci/#docker, but useful for everything
  - $DKML_CI_PROJECT_PATH_URLENCODED = [uri]::EscapeDataString($env:CI_PROJECT_PATH) # Must be url-encoded per https://docs.gitlab.com/ee/user/packages/generic_packages/
  - $PACKAGE_REGISTRY_GENERIC_URL = "${env:CI_API_V4_URL}/projects/$DKML_CI_PROJECT_PATH_URLENCODED/packages/generic"
  - '$GLAB_CURL_HEADER = "JOB-TOKEN: ${env:CI_JOB_TOKEN}"'

  - $ErrorActionPreference = 'Stop'
  - $ProgressPreference = 'SilentlyContinue'

  - $env:PSModulePath += ";installtime\windows"
  - Import-Module DeploymentVersion # Use the same $DV_ variables as 'installtime' scripts
  - Import-Module UnixInvokers      # Use Invoke-CygwinCommand and Invoke-MSYS2Command

  # ----------- Chocolatey --------------
  - |
    $oldeap = $ErrorActionPreference; $ErrorActionPreference = "SilentlyContinue";
    & where.exe choco 2> $null;
    $ErrorActionPreference = oldeap;
    if ($LastExitCode -ne 0) {
      if (Test-Path "C:\ProgramData\chocolatey\helpers\chocolateyProfile.psm1") {
        echo "The GitLab runner has Chocolatey but has not been restarted to reflect the new PATH. Will trigger a PowerShell session refresh until you have restarted it."
      } else {
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'));
      }
      Import-Module "C:\ProgramData\chocolatey\helpers\chocolateyProfile.psm1";
      refreshenv;
    }

  # ----------- Visual Studio Locator -----------
  # (Choco best practices: https://docs.chocolatey.org/en-us/choco/commands/#scripting-integration-best-practices-style-guide)
  # Due to install location bug (https://github.com/Microsoft/vswhere/wiki/Installing#chocolatey) we may have to add vswhere PATH manually.
  - $VSWHERE = "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"
  - if (Test-Path "C:\ProgramData\chocolatey\bin\vswhere.exe") { $env:PATH += ";C:\ProgramData\chocolatey\bin"; $VSWHERE = "vswhere" } elseif (!(Test-Path "$VSWHERE")) { choco upgrade vswhere -y --no-progress --version="'2.8.4'" }
  - '$VSPATH = & "$VSWHERE" -all -products ''*'' -latest -property installationPath'
  - 'echo Visual Studio: $VSPATH'

  # ----------- Curl -----------

  # curl is a built-in Powershell Alias. Want real curl.exe!
  - Remove-Item Alias:curl

  # ----------- release-cli -----------

  # https://docs.gitlab.com/ee/ci/yaml/index.html#release-cli-for-shell-executors
  - $EXTRASRC = "$PWD\_ci"
  - New-Item -Path "$EXTRASRC" -ItemType Directory
  - $RELCLI = "$EXTRASRC\releasecli"
  - New-Item -Path "$RELCLI" -ItemType Directory
  - Invoke-WebRequest -Uri "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-windows-amd64.exe" -OutFile "$RELCLI\release-cli.exe"
  - $env:PATH += ";$RELCLI"
  - release-cli -v

.before_msys2: &before-msys2
  # ----------- MSYS -----------

  # Docs: https://www.msys2.org/docs/ci/#docker
  # also an example at https://patchew.org/QEMU/20210709075218.1796207-1-thuth@redhat.com/
  - |
    if (!(Test-Path -Path C:\msys64)) {
      Invoke-WebRequest -UseBasicParsing -uri "https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe" -OutFile msys2.exe;
      .\msys2.exe -y -oC:\;
      Remove-Item msys2.exe;
      ((Get-Content -path C:\msys64\etc\post-install\07-pacman-key.post -Raw) -replace '--refresh-keys', '--version') |
        Set-Content -Path C:\msys64\etc\post-install\07-pacman-key.post;
    }
  # msys starts a process in the background and waits on it. it also handles quoting.
  # msys_direct calls the shell command synchronously.
  - $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
  - |
    function msys_direct() {
      $path_unix = C:\msys64\usr\bin\cygpath --path "$env:PATH" ;
      C:\msys64\usr\bin\bash.exe @('-lc') + ("set -eufx -o pipefail; export DKML_VSSTUDIO_DIR='$VSPATH'; PATH=`"`$PATH`":'${path_unix}'; " + $Args[0]);
    }
  - |
    function msys() {
      $path_unix = C:\msys64\usr\bin\cygpath --path "$env:PATH" ;
      Invoke-MSYS2Command -MSYS2Dir C:\msys64 -Command ("set -eufx -o pipefail; export DKML_VSSTUDIO_DIR='$VSPATH'; PATH=`"`$PATH`":'${path_unix}'; " + $Args[0])
    }
  - msys_direct 'echo' # https://www.msys2.org/docs/ci/#docker has a blank space; auto-create home directory
  - msys_direct "sed -i 's/^CheckSpace/#CheckSpace/g' /etc/pacman.conf"
  - msys_direct 'pacman --noconfirm -Syuu' # Core update
  - msys_direct 'pacman --noconfirm -Syuu' # Normal update
  - msys_direct 'pacman -Sy --noconfirm --needed
      diffutils
      make
      mingw-w64-x86_64-jq
      patch
      rsync
      tar
      unzip
      wget
      zip'
  - msys_direct 'pacman --noconfirm -Scc'  # Cleans the entire package cache
  - taskkill /F /FI "MODULES eq msys-2.0.dll" # Stops any background services that pacman started, if any

.before_cygwin: &before-cygwin
  # ----------- Cygwin -----------

  # (Choco best practices: https://docs.chocolatey.org/en-us/choco/commands/#scripting-integration-best-practices-style-guide)
  - choco upgrade cyg-get -y --no-progress --version="'1.2.1'"
  - refreshenv
  - cyg-get -help
  - cyg-get `
      curl `
      jq `
      rsync
  - Get-ItemProperty HKLM:\SOFTWARE\Cygwin\setup -Name rootdir
  - $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
  - |
    function cygwin() {
      $path_unix = c:\tools\cygwin\bin\cygpath --path "$env:PATH" ;
      Invoke-CygwinCommand -CygwinDir c:\tools\cygwin -Command ("cd '$PWD'; set -eufx -o pipefail; export DKML_VSSTUDIO_DIR='$VSPATH'; PATH=`"`$PATH`":'${path_unix}'; " + $Args[0])
    }

default:
  image: python:3.9-alpine

  before_script:
    - apk add --no-cache make rsync
    - pip install -U sphinx sphinx_rtd_theme

stages:
  - prepare
  - build
  - test
  - deploy

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_COMMIT_TAG'

windows:fetch-ocaml-opam-repo:
  extends:
  - .shared_windows_runners
  stage: prepare
  needs: []
  artifacts:
    untracked: false
    expire_in: 30 days
  rules:
    - if: '$CI_COMMIT_TAG'
  before_script:
    - *before-windows
    - *before-cygwin
  script:
    - $DEPLOYDIR = "$env:OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS"
    - if (!(Test-Path "$DEPLOYDIR")) { New-Item -Path "$DEPLOYDIR" -ItemType Directory }
    - $REPODIR = "$DEPLOYDIR\share\diskuv-ocaml\ocaml-opam-repo"

    # Fetch
    - cygwin (
        'pwd && env TOPDIR=$PWD/installtime/none/emptytop bash -x installtime/unix/private/reproducible-fetch-ocaml-opam-repo-1-setup.sh'
        + " -d '" + "$PWD" + "'"
        + " -t '" + "$DEPLOYDIR" + "'"
        + " -v " + $DV_WindowsMsvcDockerImage
        + " -a amd64"
        + " -b"
        )
    - cygwin ("cd '" + "$DEPLOYDIR" + ''' && bash -x share/diskuv-ocaml/reproducible-builds/200-fetch-ocaml-opam-repo/installtime/unix/private/reproducible-fetch-ocaml-opam-repo-2-build-noargs.sh')
    - if (!(Test-Path -Path "$REPODIR\repo")) { throw "Build failed" }

    # Create .tar.gz and .zip
    - New-Item -Path "$EXTRASRC\oorepodist" -ItemType Directory
    - cygwin ('/usr/bin/tar cvCfz ''' + "$REPODIR" + ''' _ci/oorepodist/dist.tar.gz .')
    - Compress-Archive -Path "$REPODIR\*" -DestinationPath "$EXTRASRC\oorepodist\dist.zip"

    # Create public packages
    - $PACKAGE_REGISTRY_URL = "$PACKAGE_REGISTRY_GENERIC_URL/ocaml_opam_repo-reproducible/${env:CI_COMMIT_TAG}"
    - echo $PACKAGE_REGISTRY_URL
    - cygwin "curl --header '$GLAB_CURL_HEADER' --upload-file _ci/oorepodist/dist.tar.gz '$PACKAGE_REGISTRY_URL'/ocaml-opam-repo.tar.gz"
    - cygwin "curl --header '$GLAB_CURL_HEADER' --upload-file _ci/oorepodist/dist.zip    '$PACKAGE_REGISTRY_URL'/ocaml-opam-repo.zip"

windows:build-opam:
  extends:
  - .diskuv_windows_runners
  stage: build
  parallel:
    matrix:
      - BITS: ["32", "64"]
  needs: []
  rules:
    # - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH == "next"'
  before_script:
    - *before-windows
    - *before-msys2
  script:
    - $env:MSYSTEM = 'MSYS2'       # Start MSYS2 (not MinGW 32 or 64 bit) environments
    - $DEPLOYDIR = "$env:OPAM_SYS_DEPLOY_FOLDER_WINDOWS\$env:BITS" # Separate directories only so that job can be run in parallel
    - if (!(Test-Path "$DEPLOYDIR")) { New-Item -Path "$DEPLOYDIR" -ItemType Directory }

    # ================ Prepare ================
    # Theoretically these should go in a separate job. However the GitLab runner takes 5-10 minutes to spin up a Windows container
    # so this is all in one job

    # ----------- Chocolatey -----------

    # Choco best practices: https://docs.chocolatey.org/en-us/choco/commands/#scripting-integration-best-practices-style-guide
    # 1. Git
    - choco upgrade git.install -y --no-progress --version="'2.33.0.2'" --package-parameters "'/GitOnlyOnPath /NoGitLfs /SChannel /NoAutoCrlf'"
    - refreshenv
    - where.exe git.exe

    # ================ Build ================

    - if ("$env:BITS" -eq "32") { $PLATFORM = "windows_x86" } else { $PLATFORM = "windows_x86_64" }
    - msys (
        'env'
        + ' TOPDIR=$PWD/installtime/none/emptytop'
        + ' bash -x installtime/unix/private/reproducible-compile-opam-1-setup.sh'
        + " -d '" + "$PWD" + "'"
        + " -a " + "$PLATFORM"
        + " -t '" + "$DEPLOYDIR" + "'"
        + " -v " + $DV_AvailableOpamVersion
        )
    - msys ("cd '" + "$DEPLOYDIR" + ''' && bash -x share/diskuv-ocaml/reproducible-builds/100-compile-opam/installtime/unix/private/reproducible-compile-opam-2-build-noargs.sh')
    - msys ("cd '" + "$DEPLOYDIR" + ''' && bash -x share/diskuv-ocaml/reproducible-builds/100-compile-opam/installtime/unix/private/reproducible-compile-opam-9-trim-noargs.sh')
    - if (!(Test-Path -Path "$DEPLOYDIR\bin\opam.exe")) { throw "Build failed" }

    # Create .tar.gz and .zip
    - New-Item -Path "$EXTRASRC\opamdist" -ItemType Directory
    - msys ('/usr/bin/tar cvCfz ''' + "$DEPLOYDIR" + ''' _ci/opamdist/dist.tar.gz .')
    - Compress-Archive -Path "$DEPLOYDIR\*" -DestinationPath "$EXTRASRC\opamdist\dist.zip"

    # Create public packages
    - $PACKAGE_REGISTRY_URL = "$PACKAGE_REGISTRY_GENERIC_URL/opam-reproducible/${env:CI_COMMIT_TAG}"
    - echo $PACKAGE_REGISTRY_URL
    - msys "curl --header '$GLAB_CURL_HEADER' --upload-file _ci/opamdist/dist.tar.gz '$PACKAGE_REGISTRY_URL'/opam-win${env:BITS}.tar.gz"
    - msys "curl --header '$GLAB_CURL_HEADER' --upload-file _ci/opamdist/dist.zip    '$PACKAGE_REGISTRY_URL'/opam-win${env:BITS}.zip"

test:
  stage: test
  script:
  - echo Building Sphinx html twice so that Sphinx cross-references work ...
  - make -C contributors html ; make -C contributors html O="-W"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

pages:
  stage: deploy
  script:
  - echo Building Sphinx html twice so that Sphinx cross-references work ...
  - make -C contributors html ; make -C contributors html O="-W"
  - echo Copying HTML into the GitLab Pages required 'public' folder
  - rsync -av contributors/_build/html/ public
  artifacts:
    paths:
    - public
    expire_in: 1 day
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
