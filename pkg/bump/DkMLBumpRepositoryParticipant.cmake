cmake_policy(SET CMP0057 NEW) # Support new ``if()`` IN_LIST operator.
include(${CMAKE_CURRENT_LIST_DIR}/DkMLReleaseParticipant.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/DkMLPackages.cmake)

if(NOT DKML_RELEASE_OCAML_VERSION)
    message(FATAL_ERROR "Missing -D DKML_RELEASE_OCAML_VERSION=xx")
endif()

if(NOT DKML_VERSION_OPAMVER_NEW)
    message(FATAL_ERROR "Missing -D DKML_VERSION_OPAMVER_NEW=xx")
endif()

if(NOT DKML_VERSION_SEMVER_NEW)
    message(FATAL_ERROR "Missing -D DKML_VERSION_SEMVER_NEW=xx")
endif()

if(NOT DKML_SOURCE_ARCHIVE_DIR)
    message(FATAL_ERROR "Missing -D DKML_SOURCE_ARCHIVE_DIR=xx")
endif()

if(NOT BUMP_BINARY_DIR)
    set(BUMP_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
endif()

file(READ ${CMAKE_CURRENT_LIST_DIR}/repository-field-url.in.opam REPOSITORY_FIELD_URL_TEMPLATE)

function(DkMLBumpRepositoryParticipant_AddPackageVersion)
    set(noValues)
    set(singleValues PROJECT)
    set(multiValues OPAM_PACKAGES)
    cmake_parse_arguments(PARSE_ARGV 0 ARG "${noValues}" "${singleValues}" "${multiValues}")

    # Get original .opam files
    set(opamfiles ${BUMP_BINARY_DIR}/opamfiles/${ARG_PROJECT})
    set(ARCHIVE_FILE ${DKML_SOURCE_ARCHIVE_DIR}/src.${ARG_PROJECT}.tar.gz)
    file(ARCHIVE_EXTRACT
        INPUT ${ARCHIVE_FILE}
        DESTINATION ${opamfiles}
        PATTERNS *.opam)

    foreach(OPAM_PACKAGE IN LISTS ARG_OPAM_PACKAGES)
        file(READ ${opamfiles}/${OPAM_PACKAGE}.opam OPAM_FILE)
        string(STRIP "${OPAM_FILE}" OPAM_FILE)

        # Remove ...
        # version: x.y.z
        string(REGEX REPLACE # Match at beginning of line: ^|\n
            "(^|\n)version: [^\n]+" ""
            OPAM_FILE "${OPAM_FILE}")

        # Remove ...
        # # This file is generated by dune, edit dune-project instead
        string(REGEX REPLACE # Match start of file
            "^# This file is generated by dune[^\n]+\n" ""
            OPAM_FILE "${OPAM_FILE}")

        # Values for file(CONFIGURE)
        # ---------

        # 1. Url
        # Permalink documentation:
        # https://docs.gitlab.com/ee/user/project/releases/release_fields.html#permanent-links-to-latest-release-assets
        # Example:
        # https://gitlab.com/diskuv-ocaml/distributions/dkml/-/releases/1.2.1-10/downloads/src.dkml-runtime-common.tar.gz
        set(URL_SRC https://gitlab.com/diskuv-ocaml/distributions/dkml/-/releases/${DKML_VERSION_SEMVER_NEW}/downloads/src.${ARG_PROJECT}.tar.gz)

        # 2. Checksums
        file(SHA512 ${ARCHIVE_FILE} URL_CHECKSUM_SHA512)

        # Version number
        if(OPAM_PACKAGE IN_LIST DKML_COMPILER_DKML_VERSIONED_PACKAGES)
            set(PKGVER ${OPAM_PACKAGE}.${DKML_RELEASE_OCAML_VERSION}~v${DKML_VERSION_OPAMVER_NEW})
        else()
            set(PKGVER ${OPAM_PACKAGE}.${DKML_VERSION_OPAMVER_NEW})
        endif()

        set(REL_FILENAME packages/${OPAM_PACKAGE}/${PKGVER}/opam)

        if(EXISTS ${REL_FILENAME})
            file(READ ${REL_FILENAME} ORIGINAL_PKGVER_OPAM)
            string(REPLACE "\r" "" ORIGINAL_PKGVER_OPAM "${ORIGINAL_PKGVER_OPAM}") # Normalize CRLF
            set(verb Updated)
        else()
            set(ORIGINAL_PKGVER_OPAM)
            set(verb Created)
        endif()

        file(CONFIGURE
            OUTPUT ${REL_FILENAME}
            CONTENT "${OPAM_FILE}\n${REPOSITORY_FIELD_URL_TEMPLATE}"
            @ONLY NEWLINE_STYLE UNIX)

        # Idempotent check
        file(READ ${REL_FILENAME} NEW_PKGVER_OPAM)

        if(ORIGINAL_PKGVER_OPAM AND NEW_PKGVER_OPAM STREQUAL "${ORIGINAL_PKGVER_OPAM}")
            continue()
        endif()

        message(NOTICE "${verb} ${PKGVER}")
        set_property(GLOBAL APPEND PROPERTY DkMLReleaseParticipant_REL_FILES ${REL_FILENAME})
    endforeach()
endfunction()

function(DkMLBumpRepositoryParticipant_AddPackageVersions)
    foreach(PROJECT IN LISTS DKML_PROJECTS_PREDUNE DKML_PROJECTS_POSTDUNE)
        DkMLBumpRepositoryParticipant_AddPackageVersion(
            PROJECT ${PROJECT}
            OPAM_PACKAGES ${${PROJECT}_PACKAGES}
        )
    endforeach()
endfunction()

function(DkMLBumpRepositoryParticipant_GitAddAndCommit)
    if(DRYRUN)
        return()
    endif()

    get_property(relFiles GLOBAL PROPERTY DkMLReleaseParticipant_REL_FILES)

    if(NOT relFiles)
        return()
    endif()

    list(REMOVE_DUPLICATES relFiles)

    execute_process(
        COMMAND
        ${GIT_EXECUTABLE} -c core.safecrlf=false add ${relFiles}
        COMMAND_ERROR_IS_FATAL ANY
    )
    execute_process(
        COMMAND
        ${GIT_EXECUTABLE} commit -m "Packages: ${DKML_VERSION_SEMVER_NEW}"
        ENCODING UTF-8
        COMMAND_ERROR_IS_FATAL ANY
    )
endfunction()
