#!/bin/bash
# --------------------------
# within-dev
#
# Analog of within-sandbox and sandbox-entrypoint.sh. Most of the same environment variables should be set albeit with different values.
# --------------------------
set -euf

# ------------------
# BEGIN Command line processing

usage() {
    echo "Usage:" >&2
    echo "    within-dev -h                          Display this help message." >&2
    echo "    within-dev -h                          Display this help message." >&2
    echo "    within-dev [-p PLATFORM] [-b BUILDTYPE] command ...  Run the command and any arguments in the dev platform." >&2
    echo "       -p PLATFORM: The target platform used. Defaults to 'dev'. DKML_TOOLS_DIR and BUILDDIR will be based on this" >&2
    echo "       -b BUILDTYPE: If specified, will set DK_BUILD_DIR in the dev platform" >&2
    echo "Advanced Options:" >&2
    echo "       -n: If specified, no compilation tools like vcvars64.bat are added to the environment." >&2
    echo "             This can be a multi-second speedup on Windows." >&2
    echo "       -1 PREHOOK: If specified, the Bash statements will be 'eval'-d, 'dos2unix'-d and 'eval'-d" >&2
    echo "             upon entering the Build Sandbox _before_ any other commands are run but" >&2
    echo "             _after_ the PATH has been established." >&2
    echo "             It behaves similar to:" >&2
    echo '               eval "the PREHOOK you gave" > /tmp/eval.sh' >&2
    echo '               eval /tmp/eval.sh' >&2
    echo '             Useful for setting environment variables (possibly from a script).' >&2
}

# no arguments should display usage
if [ $# -eq 0 ]; then
    usage
    exit 1
fi

# shellcheck disable=SC2034
export PLATFORM=dev
BUILDTYPE=
PREHOOK=
COMPILATION=ON
while getopts ":hb:p:1:n" opt; do
    case ${opt} in
        h )
            usage
            exit 0
        ;;
        p )
            PLATFORM=$OPTARG
        ;;
        b )
            # shellcheck disable=SC2034
            BUILDTYPE=$OPTARG
        ;;
        1 )
            PREHOOK=$OPTARG
        ;;
        n )
            COMPILATION=OFF
        ;;
        \? )
            echo "This is not an option: -$OPTARG" >&2
            usage
            exit 1
        ;;
    esac
done
shift $((OPTIND -1))

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

# END Command line processing
# ------------------

DKMLDIR=$(dirname "$0")
DKMLDIR=$(cd "$DKMLDIR"/../.. && pwd)

if [ -n "${BUILDTYPE:-}" ] || [ -n "${BUILDDIR:-}" ]; then
    # shellcheck disable=SC1091
    . "$DKMLDIR"/runtime/unix/_common_build.sh
else
    # shellcheck disable=SC1091
    . "$DKMLDIR"/runtime/unix/_common_tool.sh
fi

# Set PLATFORM_VCPKG_TRIPLET
platform_vcpkg_triplet

# Essential environment values.
LAUNCHER_ARGS=(
    # use DK_xxx_DIR so no chance of conflict with any external programs. For example BUILDDIR is used within Esy.
    DKML_TOOLS_DIR="$TOPDIR/$TOOLSDIR"
    DKML_TOOLSCOMMON_DIR="$TOPDIR/$TOOLSCOMMONDIR"
)

# give builds access to tools
ENV_PATH_PREFIX="$TOPDIR/$TOOLSDIR/local/bin:$TOPDIR/$TOOLSCOMMONDIR/local/bin"
ENV_PATH_SUFFIX=

# On Windows always disable the Automatic Unix âŸ¶ Windows Path Conversion
# described at https://www.msys2.org/docs/filesystem-paths/
disambiguate_filesystem_paths

# If and only if [-b BUILDDIR] specified
if [ -n "${BUILDTYPE:-}" ]; then
    LAUNCHER_ARGS+=(
        DK_BUILD_DIR="$TOPDIR/$BUILDDIR"
    )
fi

# Autodetect DKMLVARS and add to PATH
autodetect_dkmlvars || true
if [ -n "${DiskuvOCamlBinaryPaths:-}" ]; then
    ENV_PATH_PREFIX="$DiskuvOCamlBinaryPaths:$ENV_PATH_PREFIX"
fi

# Set PATH and run any prehooks
# Also, normalize the PATH. If we end up with any double quotes in the Windows PATH passed to
# vsdevcmd.bat then we will get '\Microsoft was unexpected at this time'
# (https://social.msdn.microsoft.com/Forums/vstudio/en-US/21821c4a-b415-4b55-8779-1d22694a8f82/microsoft-was-unexpected-at-this-time?forum=vssetup).
# That will happen if we have trailing slashes in our PATH (which Opam.exe internally cygpaths
# and escapes). Regardless, even if this didn't happen we still want normalized PATHs.
PATH="$ENV_PATH_PREFIX:$PATH$ENV_PATH_SUFFIX"
PATH=$(echo "$PATH" | PATH="/usr/bin:/bin:$PATH" sed 's#/:#:#g; s#/$##') # remove trailing slashes
if [ -n "$PREHOOK" ]; then
    if [ "${DKML_BUILD_TRACE:-ON}" = ON ]; then echo "+ [eval] $PREHOOK" >&2; fi
    # the `awk ...` is dos2unix equivalent
    eval "$PREHOOK" | awk '{ sub(/\r$/,""); print }' > "$WORK"/prehook.eval
    # shellcheck disable=SC1091
    . "$WORK"/prehook.eval
    rm -f "$WORK"/prehook.eval
    # At this point the PREHOOK may have set the PATH to be a Windows style path (ex. `opam env`).
    # So subsequent commands like `env`, `bash` and `rm` will need the PATH converted back to UNIX.
    if [ -x /usr/bin/cygpath ]; then PATH=$(/usr/bin/cygpath --path "$PATH"); fi
    # Especially ensure /usr/bin:/bin is present in PATH even if redundant so
    # `trap 'rm -rf "$WORK"' EXIT` handler can find 'rm'.
    # We use a missing /usr/bin to trigger the PATH mutation since:
    # - MSYS2 mounts /usr/bin as /bin (so /bin is automatically converted to /usr/bin in MSYS2 PATH)
    case "$PATH" in
        /usr/bin) ;;
        *:/usr/bin) ;;
        /usr/bin:*) ;;
        *:/usr/bin:*) ;;
        *)
            PATH=/usr/bin:/bin:"$PATH"
    esac
fi

# Add vcpkg packages to the PATH especially now that prehooks may have set OPAMROOT
# shellcheck disable=SC2154
if [ -n "${OPAMROOT:-}" ]; then
    VCPKG_INSTALLED_PACKAGES="$OPAMROOT/plugins/diskuvocaml/vcpkg/$dkml_root_version/installed/$PLATFORM_VCPKG_TRIPLET"
    if [ -x /usr/bin/cygpath ]; then VCPKG_INSTALLED_PACKAGES=$(/usr/bin/cygpath -au "$VCPKG_INSTALLED_PACKAGES"); fi
    PATH="$VCPKG_INSTALLED_PACKAGES/bin:$VCPKG_INSTALLED_PACKAGES/tools/pkgconf:$PATH"
else
    VCPKG_INSTALLED_PACKAGES=
fi

# Autodetect compiler like Visual Studio on Windows.
LAUNCHER="$WORK"/launch-compiler.sh
if [ "$COMPILATION" = ON ]; then
    # If we have an Opam switch with a Opam command wrapper, we don't need to waste a few seconds detecting the compiler.
    if [ -z "${OPAM_SWITCH_PREFIX:-}" ] || [ ! -e "$OPAM_SWITCH_PREFIX"/.dkml/wrap-commands.exist ]; then
        set +e
        if [ -n "$VCPKG_INSTALLED_PACKAGES" ]; then
            autodetect_compiler "$LAUNCHER" "$VCPKG_INSTALLED_PACKAGES"
        else
            autodetect_compiler "$LAUNCHER"
        fi
        EXITCODE=$?
        set -e
        if [ $EXITCODE -ne 0 ]; then
            echo "FATAL: Your system is missing a compiler, which should be installed if you have completed the Diskuv OCaml installation"
            exit 1
        fi
    fi
fi
if [ ! -e "$LAUNCHER" ]; then
    echo 'exec env "$@"' > "$LAUNCHER"
fi

# If macOS then make sure we are running the correct architecture.
# Can really only switch if the launched command is a Universal binary.
case "$PLATFORM" in
    darwin_arm64)
        # arm64 will be tried first, and then arm64e (Apple Silicon)
        LAUNCHER_ARGS+=(/usr/bin/arch -arch arm64)
        ;;
    darwin_x86_64)
        LAUNCHER_ARGS+=(/usr/bin/arch -arch x86_64)
        ;;
esac

# print PATH for troubleshooting
if [ "${DKML_BUILD_TRACE:-ON}" = ON ]; then echo "+ [PATH] $PATH" >&2; fi

# run the requested command (cannot `exec` since the launcher script is a temporary file
# that needs to be cleaned up after execution)
log_shell "$LAUNCHER" "${LAUNCHER_ARGS[@]}" "$@"
