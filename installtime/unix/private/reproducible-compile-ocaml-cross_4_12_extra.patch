diff --git a/configure b/configure
index 81a77e3b6..0ee1c6ea7 100755
--- a/configure
+++ b/configure
@@ -6558,7 +6558,7 @@ case $with_sysroot in #(
      lt_sysroot=`$CC --print-sysroot 2>/dev/null`
    fi
    ;; #(
- /*)
+ /* | ?:*) # /a/b/c or C:\Windows
    lt_sysroot=`echo "$with_sysroot" | sed -e "$sed_quote_subst"`
    ;; #(
  no|'')
@@ -13885,19 +13885,19 @@ else
 fi; system=elf ;; #(
   s390x*-*-linux*) :
     arch=s390x; model=z10; system=elf ;; #(
-  armv6*-*-linux-gnueabihf) :
+  armv6*-*-linux-*eabihf*) :
     arch=arm; model=armv6; system=linux_eabihf ;; #(
-  armv7*-*-linux-gnueabihf) :
+  armv7*-*-linux-*eabihf*) :
     arch=arm; model=armv7; system=linux_eabihf ;; #(
-  armv8*-*-linux-gnueabihf) :
+  armv8*-*-linux-*eabihf*) :
     arch=arm; model=armv8; system=linux_eabihf ;; #(
-  armv8*-*-linux-gnueabi) :
+  armv8*-*-linux-*eabi*) :
     arch=arm; model=armv8; system=linux_eabi ;; #(
-  armv7*-*-linux-gnueabi) :
+  armv7*-*-linux-*eabi*) :
     arch=arm; model=armv7; system=linux_eabi ;; #(
-  armv6t2*-*-linux-gnueabi) :
+  armv6t2*-*-linux-*eabi*) :
     arch=arm; model=armv6t2; system=linux_eabi ;; #(
-  armv6*-*-linux-gnueabi) :
+  armv6*-*-linux-*eabi*) :
     arch=arm; model=armv6; system=linux_eabi ;; #(
   armv6*-*-freebsd*) :
     arch=arm; model=armv6; system=freebsd ;; #(
@@ -13905,13 +13905,13 @@ fi; system=elf ;; #(
     arch=arm; model=armv6; system=netbsd ;; #(
   earmv7*-*-netbsd*) :
     arch=arm; model=armv7; system=netbsd ;; #(
-  armv5te*-*-linux-gnueabi) :
+  armv5te*-*-linux-*eabi*) :
     arch=arm; model=armv5te; system=linux_eabi ;; #(
-  armv5*-*-linux-gnueabi) :
+  armv5*-*-linux-*eabi*) :
     arch=arm; model=armv5; system=linux_eabi ;; #(
-  arm*-*-linux-gnueabihf) :
+  arm*-*-linux-*eabihf*) :
     arch=arm; system=linux_eabihf ;; #(
-  arm*-*-linux-gnueabi) :
+  arm*-*-linux-*eabi*) :
     arch=arm; system=linux_eabi ;; #(
   arm*-*-openbsd*) :
     arch=arm; system=bsd ;; #(
diff --git a/configure.ac b/configure.ac
index 656ffe20c..5f1563c6e 100644
--- a/configure.ac
+++ b/configure.ac
@@ -955,19 +955,19 @@ AS_CASE([$host],
     [arch=power; AS_IF([$arch64],[model=ppc64],[model=ppc]); system=elf],
   [[s390x*-*-linux*]],
     [arch=s390x; model=z10; system=elf],
-  [armv6*-*-linux-gnueabihf],
+  [armv6*-*-linux-*eabihf*],
     [arch=arm; model=armv6; system=linux_eabihf],
-  [armv7*-*-linux-gnueabihf],
+  [armv7*-*-linux-*eabihf*],
     [arch=arm; model=armv7; system=linux_eabihf],
-  [armv8*-*-linux-gnueabihf],
+  [armv8*-*-linux-*eabihf*],
     [arch=arm; model=armv8; system=linux_eabihf],
-  [armv8*-*-linux-gnueabi],
+  [armv8*-*-linux-*eabi*],
     [arch=arm; model=armv8; system=linux_eabi],
-  [armv7*-*-linux-gnueabi],
+  [armv7*-*-linux-*eabi*],
     [arch=arm; model=armv7; system=linux_eabi],
-  [armv6t2*-*-linux-gnueabi],
+  [armv6t2*-*-linux-*eabi*],
     [arch=arm; model=armv6t2; system=linux_eabi],
-  [armv6*-*-linux-gnueabi],
+  [armv6*-*-linux-*eabi*],
     [arch=arm; model=armv6; system=linux_eabi],
   [armv6*-*-freebsd*],
     [arch=arm; model=armv6; system=freebsd],
@@ -975,13 +975,13 @@ AS_CASE([$host],
     [arch=arm; model=armv6; system=netbsd],
   [earmv7*-*-netbsd*],
     [arch=arm; model=armv7; system=netbsd],
-  [armv5te*-*-linux-gnueabi],
+  [armv5te*-*-linux-*eabi*],
     [arch=arm; model=armv5te; system=linux_eabi],
-  [armv5*-*-linux-gnueabi],
+  [armv5*-*-linux-*eabi*],
     [arch=arm; model=armv5; system=linux_eabi],
-  [arm*-*-linux-gnueabihf],
+  [arm*-*-linux-*eabihf*],
     [arch=arm; system=linux_eabihf],
-  [arm*-*-linux-gnueabi],
+  [arm*-*-linux-*eabi*],
     [arch=arm; system=linux_eabi],
   [arm*-*-openbsd*],
     [arch=arm; system=bsd],
diff --git a/runtime/arm.S b/runtime/arm.S
index 612757a10..8adceaa67 100644
--- a/runtime/arm.S
+++ b/runtime/arm.S
@@ -216,10 +216,18 @@ FUNCTION(caml_allocN)
         .size   caml_allocN, .-caml_allocN
 
 /* Call a C function from OCaml */
-/* Function to call is in r7 */
-
-FUNCTION(caml_c_call)
-        CFI_STARTPROC
+/* Function to call is in r7 for non-PIC code, or is a
+   named PLT function for PIC code */
+/* A PLT function address is only available when "cited by a BL-class relocation directive" like `bl func(PLT)`.
+   We can't, for example, do `adr r7, func(PLT)` and then jump to caml_c_call or Ljump_to_caml.
+   So implemented as a macro that inserts the instructions inline and branch jumps (branch_op = bl or blx)
+   to (c_code_addr or caml_code_addr). Use blx for r7/r12 register and bl for named PLT functions.
+   Warning: bl does not switch to/from Thumb state since "it is generally pointless trying to construct a PLT entry
+   entirely in 16-bit Thumb instructions". In other words: Do not emit Thumb PLT entries for PIC code!
+   Confer https://github.com/ARM-software/abi-aa/blob/320a56971fdcba282b7001cf4b84abb4fd993131/aaelf32/aaelf32.rst#plt-sequences-and-usage-models .
+*/
+
+        .macro inline_caml_c_call branch_op c_code_addr
     /* Record lowest stack address and return address */
         str     lr, Caml_state(last_return_address)
         str     sp, Caml_state(bottom_of_stack)
@@ -230,25 +238,26 @@ FUNCTION(caml_c_call)
         str     alloc_ptr, Caml_state(young_ptr)
         str     trap_ptr, Caml_state(exception_pointer)
     /* Call the function */
-        blx     r7
+        \branch_op \c_code_addr
     /* Reload alloc ptr */
         ldr     alloc_ptr, Caml_state(young_ptr)
     /* Return */
         bx      r4
+        .endm
+
+FUNCTION(caml_c_call)
+        CFI_STARTPROC
+        inline_caml_c_call blx r7
         CFI_ENDPROC
         .size   caml_c_call, .-caml_c_call
 
 /* Start the OCaml program */
 
-FUNCTION(caml_start_program)
-        CFI_STARTPROC
-        ldr     r12, =caml_program
-
 /* Code shared with caml_callback* */
-/* Address of OCaml code to call is in r12 */
+/* Address of OCaml code to call should either be r12 for non-PIC code, or is a
+   named PLT function for PIC code. Same discussion as inline_caml_c_call */
 /* Arguments to the OCaml code are in r0...r3 */
-
-.Ljump_to_caml:
+        .macro inline_jump_to_caml branch_op caml_code_addr
 #if defined(SYS_linux_eabihf) || defined(SYS_netbsd)
     /* Save callee-save floating-point registers */
         vpush   {d8-d15}; CFI_ADJUST(64)
@@ -260,7 +269,14 @@ FUNCTION(caml_start_program)
 #else
         CFI_OFFSET(lr, -4)
 #endif
+#ifdef __PIC__
+    /* get address of 'linked_gsym_Caml_state:' in our .data section */
+        adr     domain_state_ptr, linked_gsym_Caml_state
+    /* read the word at 'linked_gsym_Caml_state:', which is the address of Caml_state itself */
+        ldr     domain_state_ptr, [domain_state_ptr]
+#else
         ldr     domain_state_ptr, =Caml_state
+#endif
         ldr     domain_state_ptr, [domain_state_ptr]
     /* Setup a callback link on the stack */
         sub     sp, sp, 16; CFI_ADJUST(16)              /* 8-byte alignment */
@@ -272,7 +288,7 @@ FUNCTION(caml_start_program)
         str     r6, [sp, 8]
     /* Setup a trap frame to catch exceptions escaping the OCaml code */
         sub     sp, sp, 8; CFI_ADJUST(8)
-        ldr     r5, =.Ltrap_handler
+        adr     r5, .Ltrap_handler
         ldr     r4, Caml_state(exception_pointer)
         str     r4, [sp, 0]
         str     r5, [sp, 4]
@@ -280,7 +296,21 @@ FUNCTION(caml_start_program)
     /* Reload allocation pointer */
         ldr     alloc_ptr, Caml_state(young_ptr)
     /* Call the OCaml code */
-        blx     r12
+        \branch_op \caml_code_addr
+        .endm
+
+FUNCTION(caml_start_program)
+        CFI_STARTPROC
+
+#ifdef __PIC__
+        inline_jump_to_caml bl caml_program(PLT)
+#else
+        ldr  r12, =caml_program
+#endif
+
+.Ljump_to_caml:
+    /* Regardless of PIC, this local label will be used by caml_callback_asm() */
+        inline_jump_to_caml blx r12
 .Lcaml_retaddr:
     /* Pop the trap frame, restoring caml_exception_pointer */
         ldr     r5, [sp, 0]
@@ -397,8 +427,12 @@ FUNCTION(caml_callback2_asm)
         ldr     r0, [r2]          /* r0 = first arg */
         ldr     r1, [r2,4]        /* r1 = second arg */
         mov     r2, r12           /* r2 = closure environment */
-        ldr     r12, =caml_apply2
+#ifdef __PIC__
+        inline_jump_to_caml bl caml_apply2(PLT)
+#else
+        ldr  r12, =caml_apply2
         b       .Ljump_to_caml
+#endif
         CFI_ENDPROC
         .size   caml_callback2_asm, .-caml_callback2_asm
 
@@ -411,17 +445,25 @@ FUNCTION(caml_callback3_asm)
         ldr     r0, [r2]          /* r0 = first arg */
         ldr     r1, [r2,4]        /* r1 = second arg */
         ldr     r2, [r2,8]        /* r2 = third arg */
-        ldr     r12, =caml_apply3
+#ifdef __PIC__
+        inline_jump_to_caml bl caml_apply3(PLT)
+#else
+        ldr  r12, =caml_apply3
         b       .Ljump_to_caml
+#endif
         CFI_ENDPROC
         .size   caml_callback3_asm, .-caml_callback3_asm
 
 FUNCTION(caml_ml_array_bound_error)
         CFI_STARTPROC
+#ifdef __PIC__
+        inline_caml_c_call bl caml_array_bound_error(PLT)
+#else
     /* Load address of [caml_array_bound_error] in r7 */
-        ldr     r7, =caml_array_bound_error
+        ldr  r7, =caml_array_bound_error
     /* Call that function */
         b       caml_c_call
+#endif
         CFI_ENDPROC
         .size   caml_ml_array_bound_error, .-caml_ml_array_bound_error
 
@@ -429,6 +471,14 @@ FUNCTION(caml_ml_array_bound_error)
         .globl  caml_system__code_end
 caml_system__code_end:
 
+#ifdef __PIC__
+/* Constant pool for global offset table entries and other words resolved at link time */
+        .data
+        .align 2
+linked_gsym_Caml_state:
+        .word Caml_state
+#endif
+
 /* GC roots for callback */
 
         .data
