variables:
  OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS: '_ci\OOR'
  OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS: '_ci\BC'
  OCAML_SYS_DEPLOY_FOLDER_WINDOWS: 'C:\DiskuvOCaml\OcamlSys'

win32:oorepo-fetch-1:
  extends:
    - .windows:before-script-shared-cygwin
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH == "next"'
  needs: []
  variables:
    # We have to specify an arbitrary but real OCAMLVERSION in this step because the reproducible setup scripts require it
    # because the scripts expect all the individual steps (include the 9-trim.sh step) to be executed.
    # However we are simply downloading the Docker images files in this step so we can re-use CI artifacts.
    # Don't worry; we'll re-setup the OCAMLVERSION in the matrix job step.
    OCAMLVERSION: 4.13.1
  cache:
    key:
      files:
        - .dkmlroot
    paths:
      - _ci\moby
    when: 'always' # keep the Moby cache even on failure (perhaps partial download)
  artifacts:
    name: "ocaml-opam-repo-full"
    paths:
      - '$OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS\full-opam-root.7z'
      - '$OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS\ocamlrun.7z'
      - vendor\drd\src\ml\ocaml_opam_repo_trim.bc

  script:
    - $DEPLOYDIR = "$env:OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS"
    - if (!(Test-Path "$DEPLOYDIR")) { New-Item -Path "$DEPLOYDIR" -ItemType Directory }
    - if (!(Test-Path "$OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS")) { New-Item -Path "$OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS" -ItemType Directory }

    # Download OCaml bytecode runner (can we produce smaller bytecode runner tarballs!)
    - if ("${env:CI_COMMIT_TAG}" -eq "") { $PKGTAG= "$env:CI_COMMIT_BRANCH" } else { $PKGTAG = "$env:CI_COMMIT_TAG"; $PKGTAG = $PKGTAG -replace "^v" }
    - Invoke-WebRequest `
        -Uri "https://github.com/diskuv/dkml-component-ocamlrun/releases/download/4.12.1-v1.0.2/dkml-component-staging-ocamlrun.tar.gz" `
        -OutFile "ocamlrun.tar.gz"
    - if (!(Test-Path "$env:OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS\ocamlrun")) { New-Item -Path "$env:OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS\$ocamlrun" -ItemType Directory }
    - cygwin ("tar xCfz '$env:OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS\ocamlrun' ocamlrun.tar.gz --strip-components 3 staging-files/$env:HOSTABI")

    # Download support bytecode that was uploaded by release.sh
    - Invoke-WebRequest `
        -Uri "https://gitlab.com/api/v4/projects/diskuv%2Fdiskuv-ocaml/packages/generic/ocaml_opam_repo-support/$PKGTAG/ocaml_opam_repo_trim.bc" `
        -OutFile "vendor/drd/src/ml/ocaml_opam_repo_trim.bc"

    # Setup and Fetch
    - cygwin ("'$env:CI_PROJECT_DIR\.gitlab\ci\oorepo\setup-fetch.sh' '$env:CI_PROJECT_DIR' '$DEPLOYDIR' '$DV_WindowsMsvcDockerImage' '$env:OCAMLVERSION' ''$env:OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS\ocamlrun' vendor/drd/src/ml/ocaml_opam_repo_trim.bc")
    - if (!(Test-Path -Path "$DEPLOYDIR\full-opam-root\msvc-amd64")) { throw "Build failed" }

    # Package artifacts
    - |
      cd $DEPLOYDIR
      7z a -t7z full-opam-root.7z full-opam-root\ -r -y

      cd "$env:OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS"
      7z a -t7z ocamlrun.7z "ocamlrun\" -r y

      cd "$env:CI_PROJECT_DIR"
      cd "$OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS"
      7z a -t7z ocamlrun.7z

  after_script:
    # Don't waste space and time caching MOBY/tmp folder created by moby-extract-opam-root.sh
    - if (Test-Path -Path '_ci/moby/tmp') { Remove-Item -Path '_ci/moby/tmp' -Recurse -Force }

win32:oorepo-matrix-2:
  extends:
    - .windows:before-script-shared-cygwin
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG'
    # - if: '$CI_COMMIT_BRANCH == "next"'
  needs: ["win32:oorepo-fetch-1"]
  dependencies:
    # We do not want to update the Moby cache because we do a destructive trimming operation in this step, but we do want the
    # full-opam-root/ available to us as an input
    - win32:oorepo-fetch-1
  variables:
    # We need the ocaml interpreter; use 32-bit since will always work regardless of CI machine
    HOSTABI: windows_x86
    # We don't need any cross-compiler (if we built them at all in win32:build-ocaml)
    #NAMESUFFIX: ""
  parallel:
    matrix:
      - OCAMLVERSION: 4.12.1
      - OCAMLVERSION: 4.13.1
  artifacts: # The artifact is not needed, except for browsing the repository at https://gitlab.com/diskuv/diskuv-ocaml/-/jobs to troubleshoot what package versions are picked
    name: "ocaml-opam-repo-${OCAMLVERSION}"
    paths:
      - '$OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS/share/dkml/repro/$OCAMLVERSION'

  script:
    - $DEPLOYDIR = "$env:OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS"
    - if (!(Test-Path "$DEPLOYDIR")) { New-Item -Path "$DEPLOYDIR" -ItemType Directory }
    - $REPODIR = "$DEPLOYDIR\share\dkml\repro\${env:OCAMLVERSION}"

    # Unpackage artifacts
    - |
      cd "$DEPLOYDIR"
      7z x full-opam-root.7z -y

      cd "$env:CI_PROJECT_DIR"
      dir "$DEPLOYDIR"
    - |
      cd "$env:OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS"
      7z x ocamlrun.7z -y

      cd "$env:CI_PROJECT_DIR"
      dir "$env:OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS"
    - dir _ci

    # Setup (again, but this is a new CI job without the artifacts from the first setup.sh, and this time we use the right OCAMLVERSION)
    - cygwin (
        "env TOPDIR='$env:CI_PROJECT_DIR/vendor/drc/all/emptytop' vendor/drd/src/unix/private/r-f-oorepo-1-setup.sh"
        + " -d '" + "$env:CI_PROJECT_DIR" + "'"
        + " -t '" + "$DEPLOYDIR" + "'"
        + " -v '" + $DV_WindowsMsvcDockerImage + "'"
        + " -a amd64"
        + " -b '$env:OCAMLVERSION'"
        + " -c '$env:OCAML_OPAM_REPO_BYTECODE_FOLDER_WINDOWS\ocamlrun'"
        + " -e vendor/drd/src/ml/ocaml_opam_repo_trim.bc"
        )

    # No Fetch needed because we have full-opam-root from [dependencies:]
    - if (!(Test-Path -Path "$DEPLOYDIR\full-opam-root")) { throw "Artifact download of Fetch failed" }

    # Trim
    - date
    - cygwin ('export DKML_TMP_PARENTDIR=$(mktemp -d /tmp/dkmlp.XXXXX)'
        + " ; cd '$DEPLOYDIR' && share/dkml/repro/200-fetch-oorepo-${env:OCAMLVERSION}/vendor/drd/src/unix/private/r-f-oorepo-9-trim-noargs.sh"
        + ' ; ec=$?; rm -rf "$DKML_TMP_PARENTDIR"; exit $ec')
    - if (!(Test-Path -Path "$REPODIR\pins.txt")) { throw "Trim failed" }

    # Create .tar.gz and .zip
    - New-Item -Path "$EXTRASRC\oorepodist" -ItemType Directory
    - cygwin ('/usr/bin/tar cvCfz ''' + "$REPODIR" + ''' _ci/oorepodist/dist.tar.gz .')
    - Compress-Archive -Path "$REPODIR\*" -DestinationPath "$EXTRASRC\oorepodist\dist.zip"

    # Create public packages
    - if ("${env:CI_COMMIT_TAG}" -eq "") { $PKGTAG= "$env:CI_COMMIT_BRANCH" } else { $PKGTAG = "$env:CI_COMMIT_TAG"; $PKGTAG = $PKGTAG -replace "^v" }
    - $PACKAGE_REGISTRY_URL = "$PACKAGE_REGISTRY_GENERIC_URL/ocaml_opam_repo-reproducible/$PKGTAG"
    - echo $PACKAGE_REGISTRY_URL
    - cygwin "curl --fail --header '$GLAB_CURL_HEADER' --upload-file _ci/oorepodist/dist.tar.gz '$PACKAGE_REGISTRY_URL'/ocaml-opam-repo-${env:OCAMLVERSION}.tar.gz"
    - cygwin "curl --fail --header '$GLAB_CURL_HEADER' --upload-file _ci/oorepodist/dist.zip    '$PACKAGE_REGISTRY_URL'/ocaml-opam-repo-${env:OCAMLVERSION}.zip"

  after_script:
    # Don't waste space and time caching MOBY/tmp folder created by moby-extract-opam-root.sh
    - if (Test-Path -Path '_ci/moby/tmp') { Remove-Item -Path '_ci/moby/tmp' -Recurse -Force }
