variables:
  OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS: '_ci\OOR'
  OCAML_SYS_DEPLOY_FOLDER_WINDOWS: 'C:\DiskuvOCaml\OcamlSys'

win32:build-ocaml:
  extends:
    - .windows:before-script-shared-msys2-setupmachine
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG'
    # - if: '$CI_COMMIT_BRANCH == "next"'
  parallel:
    matrix:
      - HOSTABI: windows_x86
        #NAMESUFFIX: ""
        #TARGETABIS: "" # haven't done a patch yet for flexdll to support ARM32 (Windows CE); other patches done
        OCAMLVERSION: ["4.13.1", "4.12.1"]
      - HOSTABI: windows_x86_64
        #NAMESUFFIX: ""
        #TARGETABIS: "" # haven't done a patch yet for flexdll to support ARM64 (Windows 10 ARM on Snapdragon); other patches done
        OCAMLVERSION: ["4.13.1", "4.12.1"]
  needs: []
  script:
    - $env:MSYSTEM = 'MSYS2' # Start MSYS2 (not MinGW 32 or 64 bit) environments
    - $DEPLOYDIR = "$env:OCAML_SYS_DEPLOY_FOLDER_WINDOWS\$env:HOSTABI" # Separate directories only so that job can be run in parallel
    - if (!(Test-Path "$DEPLOYDIR")) { New-Item -Path "$DEPLOYDIR" -ItemType Directory }

    # ================ Prepare ================
    # Theoretically these should go in a separate job. However the GitLab runner takes 5-10 minutes to spin up a Windows container
    # so this is all in one job

    # ----------- Chocolatey -----------

    # Git (not part of GitLab Windows Shared Runner images)
    # (Choco best practices: https://docs.chocolatey.org/en-us/choco/commands/#scripting-integration-best-practices-style-guide)
    - choco upgrade git.install -y --no-progress --version="'2.33.0.2'" --package-parameters "'/GitOnlyOnPath /NoGitLfs /SChannel /NoAutoCrlf'"
    - refreshenv
    - where.exe git.exe

    # ================ Build ================
    - if ($env:OCAMLVERSION -eq "4.12.1") { $COMMITID = "46c947827ec2f6d6da7fe5e195ae5dda1d2ad0c5" }
    - if ($env:OCAMLVERSION -eq "4.13.1") { $COMMITID = "ab626576eee205615a9d7c5a66c2cb2478f1169c" }
    - if ($env:OCAMLVERSION -eq "5.00.0+dev0-2021-11-05") { $COMMITID = "284834d31767d323aae1cee4ed719cc36aa1fb2c" }
    - msys (
      'env'
      + ' TOPDIR=$PWD/vendor/dkml-runtime-common/all/emptytop'
      + ' vendor/dkml-compiler/src/reproducible-compile-ocaml-1-setup.sh'
      + " -d '" + "$PWD" + "'"
      + " -t '" + "$DEPLOYDIR" + "'"
      + " -v '$COMMITID'"
      + " -e " + "$env:HOSTABI"
      )
    - msys ("cd '" + "$DEPLOYDIR" + ''' && share/dkml/repro/100-compile-ocaml/vendor/dkml-compiler/src/reproducible-compile-ocaml-2-build_host-noargs.sh')
    - if (!(Test-Path -Path "$DEPLOYDIR\bin\ocaml.exe")) { throw "Build failed" }

    # Clean up excess files, including git submodules and cross-compiled targets
    - git -C "$DEPLOYDIR\src\ocaml" clean -d -f -x
    - git -C "$DEPLOYDIR\src\ocaml" submodule foreach --recursive "git clean -d -f -x -"
    - if (Test-Path "$DEPLOYDIR\opt\mlcross") { Get-ChildItem -Path "$DEPLOYDIR\opt\mlcross" -Directory | ForEach-Object { Join-Path -Path $_.FullName -ChildPath src\ocaml } | ForEach-Object { git -C "$_" clean -d -f -x } }
    - if (Test-Path "$DEPLOYDIR\opt\mlcross") { Get-ChildItem -Path "$DEPLOYDIR\opt\mlcross" -Directory | ForEach-Object { Join-Path -Path $_.FullName -ChildPath src\ocaml } | ForEach-Object { git -C "$_" submodule foreach --recursive "git clean -d -f -x -" } }

    # Create .zip
    - New-Item -Path "$EXTRASRC\ocamldist" -ItemType Directory
    - Compress-Archive -Path "$DEPLOYDIR\*" -DestinationPath "$EXTRASRC\ocamldist\dist.zip"

    # Create public packages
    - if ("${env:CI_COMMIT_TAG}" -eq "") { $PKGTAG= "$env:CI_COMMIT_BRANCH" } else { $PKGTAG = "$env:CI_COMMIT_TAG" }
    - $PACKAGE_REGISTRY_URL = "$PACKAGE_REGISTRY_GENERIC_URL/ocaml-reproducible/$PKGTAG"
    - echo $PACKAGE_REGISTRY_URL
    - msys "curl --fail --header '$GLAB_CURL_HEADER' --upload-file _ci/ocamldist/dist.zip    '$PACKAGE_REGISTRY_URL'/ocaml-${env:OCAMLVERSION}-${env:HOSTABI}${env:NAMESUFFIX}.zip"

win32:oorepo-fetch-1:
  extends:
    - .windows:before-script-shared-cygwin
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG'
    # - if: '$CI_COMMIT_BRANCH == "next"'
  needs: []
  variables:
    # We have to specify an arbitrary but real OCAMLVERSION in this step because the reproducible setup scripts require it
    # because the scripts expect all the individual steps (include the 9-trim.sh step) to be executed.
    # However we are simply downloading the Docker images files in this step so we can re-use CI artifacts.
    # Don't worry; we'll re-setup the OCAMLVERSION in the matrix job step.
    OCAMLVERSION: 4.13.1
  cache:
    key:
      files:
        - contributors\.userprofile.cachekey
        - .dkmlroot
    paths:
      - _ci\moby
    when: 'always' # keep the Moby cache even on failure (perhaps partial download)
  artifacts:
    name: "ocaml-opam-repo-full"
    paths:
      - '$OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS\full-opam-root.7z'

  script:
    - $DEPLOYDIR = "$env:OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS"
    - if (!(Test-Path "$DEPLOYDIR")) { New-Item -Path "$DEPLOYDIR" -ItemType Directory }

    # Setup and Fetch
    - cygwin (
        "env TOPDIR='$env:CI_PROJECT_DIR/vendor/dkml-runtime-common/all/emptytop' installtime/unix/private/reproducible-fetch-ocaml-opam-repo-1-setup.sh"
        + " -d '" + "$env:CI_PROJECT_DIR" + "'"
        + " -t '" + "$DEPLOYDIR" + "'"
        + " -v '" + $DV_WindowsMsvcDockerImage + "'"
        + " -a amd64"
        + " -b '$env:OCAMLVERSION'"
        )
    # Because Cygwin has a max 260 character limit of absolute file names, we place the working directories in /tmp, and override moby/.
    # Because we want to make the full repository as an artifact, we override opamroot/.
    - cygwin ('export TMPPARENTDIR_BUILDHOST=$(mktemp -d /tmp/dkmlp.XXXXX)'
        + " ; export DKML_MOBYDIR='$env:CI_PROJECT_DIR/_ci/moby'"
        + " && cd '$DEPLOYDIR' && share/dkml/repro/200-fetch-oorepo-${env:OCAMLVERSION}/installtime/unix/private/reproducible-fetch-ocaml-opam-repo-2-build-noargs.sh"
        + ' ; ec=$?; rm -rf "$TMPPARENTDIR_BUILDHOST"; exit $ec')
    - if (!(Test-Path -Path "$DEPLOYDIR\full-opam-root\msvc-amd64")) { throw "Build failed" }

    # Package artifacts
    - |
      cd $DEPLOYDIR
      7z a -t7z full-opam-root.7z full-opam-root\ -r -y

  after_script:
    # Don't waste space and time caching MOBY/tmp folder created by moby-extract-opam-root.sh
    - if (Test-Path -Path '_ci/moby/tmp') { Remove-Item -Path '_ci/moby/tmp' -Recurse -Force }

win32:oorepo-matrix-2:
  extends:
    - .windows:before-script-shared-cygwin
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG'
    # - if: '$CI_COMMIT_BRANCH == "next"'
  needs: ["win32:oorepo-fetch-1", "win32:build-ocaml"]
  dependencies:
    - win32:build-ocaml
    # We do not want to update the Moby cache because we do a destructive trimming operation in this step, but we do want the
    # full-opam-root/ available to us as an input
    - win32:oorepo-fetch-1
  variables:
    # We need the ocaml interpreter; use 32-bit since will always work regardless of CI machine
    HOSTABI: windows_x86
    # We don't need any cross-compiler (if we built them at all in win32:build-ocaml)
    #NAMESUFFIX: ""
  parallel:
    matrix:
      - OCAMLVERSION: 4.12.1
      - OCAMLVERSION: 4.13.1
  artifacts: # The artifact is not needed, except for browsing the repository at https://gitlab.com/diskuv/diskuv-ocaml/-/jobs to troubleshoot what package versions are picked
    name: "ocaml-opam-repo-${OCAMLVERSION}"
    paths:
      - '$OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS/share/dkml/repro/$OCAMLVERSION'

  script:
    - $DEPLOYDIR = "$env:OCAML_OPAM_REPO_DEPLOY_FOLDER_WINDOWS"
    - if (!(Test-Path "$DEPLOYDIR")) { New-Item -Path "$DEPLOYDIR" -ItemType Directory }
    - $REPODIR = "$DEPLOYDIR\share\dkml\repro\${env:OCAMLVERSION}"

    # Download OCaml
    - if ("${env:CI_COMMIT_TAG}" -eq "") { $PKGTAG= "$env:CI_COMMIT_BRANCH" } else { $PKGTAG = "$env:CI_COMMIT_TAG" }
    - Invoke-WebRequest -Uri "https://gitlab.com/api/v4/projects/diskuv%2Fdiskuv-ocaml/packages/generic/ocaml-reproducible/$PKGTAG/ocaml-${env:OCAMLVERSION}-${env:HOSTABI}${env:NAMESUFFIX}.zip" -OutFile "ocaml.dist.zip"
    - Expand-Archive -Path "ocaml.dist.zip" -DestinationPath "$env:OCAML_SYS_DEPLOY_FOLDER_WINDOWS\$env:HOSTABI" -Force

    # Unpackage artifacts
    - |
      cd "$DEPLOYDIR"
      7z x full-opam-root.7z -y
      cd "$env:CI_PROJECT_DIR"
      dir _ci
      dir _ci\OOR
      dir "$DEPLOYDIR"

    # Setup (again, but this is a new CI job without the artifacts from the first setup.sh, and this time we use the right OCAMLVERSION)
    - cygwin (
        "env TOPDIR='$env:CI_PROJECT_DIR/vendor/dkml-runtime-common/all/emptytop' installtime/unix/private/reproducible-fetch-ocaml-opam-repo-1-setup.sh"
        + " -d '" + "$env:CI_PROJECT_DIR" + "'"
        + " -t '" + "$DEPLOYDIR" + "'"
        + " -v '" + $DV_WindowsMsvcDockerImage + "'"
        + " -a amd64"
        + " -b '$env:OCAMLVERSION'"
        + " -c '$env:OCAML_SYS_DEPLOY_FOLDER_WINDOWS\$env:HOSTABI'"
        )

    # No Fetch needed because we have full-opam-root from [dependencies:]
    - if (!(Test-Path -Path "$DEPLOYDIR\full-opam-root")) { throw "Artifact download of Fetch failed" }

    # Trim
    - date
    - cygwin ('export TMPPARENTDIR_BUILDHOST=$(mktemp -d /tmp/dkmlp.XXXXX)'
        + " ; cd '$DEPLOYDIR' && share/dkml/repro/200-fetch-oorepo-${env:OCAMLVERSION}/installtime/unix/private/reproducible-fetch-ocaml-opam-repo-9-trim-noargs.sh"
        + ' ; ec=$?; rm -rf "$TMPPARENTDIR_BUILDHOST"; exit $ec')
    - if (!(Test-Path -Path "$REPODIR\pins.txt")) { throw "Trim failed" }

    # Create .tar.gz and .zip
    - New-Item -Path "$EXTRASRC\oorepodist" -ItemType Directory
    - cygwin ('/usr/bin/tar cvCfz ''' + "$REPODIR" + ''' _ci/oorepodist/dist.tar.gz .')
    - Compress-Archive -Path "$REPODIR\*" -DestinationPath "$EXTRASRC\oorepodist\dist.zip"

    # Create public packages
    - if ("${env:CI_COMMIT_TAG}" -eq "") { $PKGTAG= "$env:CI_COMMIT_BRANCH" } else { $PKGTAG = "$env:CI_COMMIT_TAG" }
    - $PACKAGE_REGISTRY_URL = "$PACKAGE_REGISTRY_GENERIC_URL/ocaml_opam_repo-reproducible/$PKGTAG"
    - echo $PACKAGE_REGISTRY_URL
    - cygwin "curl --fail --header '$GLAB_CURL_HEADER' --upload-file _ci/oorepodist/dist.tar.gz '$PACKAGE_REGISTRY_URL'/ocaml-opam-repo-${env:OCAMLVERSION}.tar.gz"
    - cygwin "curl --fail --header '$GLAB_CURL_HEADER' --upload-file _ci/oorepodist/dist.zip    '$PACKAGE_REGISTRY_URL'/ocaml-opam-repo-${env:OCAMLVERSION}.zip"

  after_script:
    # Don't waste space and time caching MOBY/tmp folder created by moby-extract-opam-root.sh
    - if (Test-Path -Path '_ci/moby/tmp') { Remove-Item -Path '_ci/moby/tmp' -Recurse -Force }
