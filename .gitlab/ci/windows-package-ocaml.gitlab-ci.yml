windows:build-opam:
  extends:
    - .windows:before-script-shared-msys2-setupmachine
  stage: build
  parallel:
    matrix:
      - BITS: 32
        PLATFORM: windows_x86
        OCAMLVER: ["4.13.1", "4.12.1"]
      - BITS: 64
        PLATFORM: windows_x86_64
        OCAMLVER: ["4.13.1", "4.12.1"]
  needs: []
  rules:
    - if: '$CI_COMMIT_TAG'
    # - if: '$CI_COMMIT_BRANCH == "next"'
  script:
    - $env:MSYSTEM = 'MSYS2' # Start MSYS2 (not MinGW 32 or 64 bit) environments
    - $DEPLOYDIR = "$env:OPAM_SYS_DEPLOY_FOLDER_WINDOWS\$env:BITS" # Separate directories only so that job can be run in parallel
    - if (!(Test-Path "$DEPLOYDIR")) { New-Item -Path "$DEPLOYDIR" -ItemType Directory }

    # ================ Prepare ================
    # Theoretically these should go in a separate job. However the GitLab runner takes 5-10 minutes to spin up a Windows container
    # so this is all in one job

    # ----------- Chocolatey -----------

    # Git (not part of GitLab Windows Shared Runner images)
    # (Choco best practices: https://docs.chocolatey.org/en-us/choco/commands/#scripting-integration-best-practices-style-guide)
    - choco upgrade git.install -y --no-progress --version="'2.33.0.2'" --package-parameters "'/GitOnlyOnPath /NoGitLfs /SChannel /NoAutoCrlf'"
    - refreshenv
    - where.exe git.exe

    # ================ Build ================
    - if ($env:OCAMLVER -eq "4.12.1") { $COMMITID = "46c947827ec2f6d6da7fe5e195ae5dda1d2ad0c5" }
    - if ($env:OCAMLVER -eq "4.13.1") { $COMMITID = "ab626576eee205615a9d7c5a66c2cb2478f1169c" }
    - msys (
      'env'
      + ' TOPDIR=$PWD/installtime/none/emptytop'
      + ' installtime/unix/private/reproducible-compile-ocaml-1-setup.sh'
      + " -d '" + "$PWD" + "'"
      + " -t '" + "$DEPLOYDIR" + "'"
      + " -v '$COMMITID'"
      + " -e " + "$env:PLATFORM"
      )
    - msys ("cd '" + "$DEPLOYDIR" + ''' && share/dkml/repro/100-compile-ocaml/installtime/unix/private/reproducible-compile-ocaml-2-build_host-noargs.sh')
    - if (!(Test-Path -Path "$DEPLOYDIR\bin\ocaml.exe")) { throw "Build failed" }

    # Clean up excess files, including git submodules and cross-compiled targets
    - git -C "$DEPLOYDIR\src\ocaml" clean -d -f -x
    - git -C "$DEPLOYDIR\src\ocaml" submodule foreach --recursive clean -d -f -
    - if (Test-Path "$DEPLOYDIR\opt\mlcross") { Get-ChildItem -Path "$DEPLOYDIR\opt\mlcross" -Directory | ForEach-Object { Join-Path -Path $_.FullName -ChildPath src\ocaml } | ForEach-Object { git -C "$_" clean -d -f -x } }
    - if (Test-Path "$DEPLOYDIR\opt\mlcross") { Get-ChildItem -Path "$DEPLOYDIR\opt\mlcross" -Directory | ForEach-Object { Join-Path -Path $_.FullName -ChildPath src\ocaml } | ForEach-Object { git -C "$_" submodule foreach --recursive clean -d -f - } }

    # Create .tar.gz and .zip
    - New-Item -Path "$EXTRASRC\ocamldist" -ItemType Directory
    - msys ('/usr/bin/tar cvCfz ''' + "$DEPLOYDIR" + ''' _ci/ocamldist/dist.tar.gz .')
    - Compress-Archive -Path "$DEPLOYDIR\*" -DestinationPath "$EXTRASRC\ocamldist\dist.zip"

    # Create public packages
    - if ("${env:CI_COMMIT_TAG}" -ne "") { $PACKAGE_REGISTRY_URL = "$PACKAGE_REGISTRY_GENERIC_URL/ocaml-reproducible/${env:CI_COMMIT_TAG}"; }
    - if ("${env:CI_COMMIT_TAG}" -ne "") { echo $PACKAGE_REGISTRY_URL; }
    - if ("${env:CI_COMMIT_TAG}" -ne "") { msys "curl --fail --header '$GLAB_CURL_HEADER' --upload-file _ci/ocamldist/dist.tar.gz '$PACKAGE_REGISTRY_URL'/ocaml-${env:OCAMLVER}-win${env:BITS}.tar.gz"; }
    - if ("${env:CI_COMMIT_TAG}" -ne "") { msys "curl --fail --header '$GLAB_CURL_HEADER' --upload-file _ci/ocamldist/dist.zip    '$PACKAGE_REGISTRY_URL'/ocaml-${env:OCAMLVER}-win${env:BITS}.zip"; }
