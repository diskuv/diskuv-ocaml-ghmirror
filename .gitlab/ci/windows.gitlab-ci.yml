.shared_windows_runners: # Cost to spin up Windows runner is up to 3.5 minutes as of 2021-09-14.
  # https://gitlab.com/gitlab-org/ci-cd/shared-runners/images/gcp/windows-containers/-/tree/main/cookbooks/preinstalled-software
  tags:
    - shared-windows
    - windows
    - windows-1809

.diskuv_windows_runners:
  # Capabilities:
  # - Windows 10
  # - official Git 2.33.0.2+ for Windows
  tags:
    - diskuv
    - windows
    - windows-1809

.before_windows: &before-windows
  - date
  - '[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12' # From https://www.msys2.org/docs/ci/#docker, but useful for everything
  - $DKML_CI_PROJECT_PATH_URLENCODED = [uri]::EscapeDataString($env:CI_PROJECT_PATH) # Must be url-encoded per https://docs.gitlab.com/ee/user/packages/generic_packages/
  - $PACKAGE_REGISTRY_GENERIC_URL = "${env:CI_API_V4_URL}/projects/$DKML_CI_PROJECT_PATH_URLENCODED/packages/generic"
  - '$GLAB_CURL_HEADER = "JOB-TOKEN: ${env:CI_JOB_TOKEN}"'

  - $ErrorActionPreference = 'Stop'
  - $ProgressPreference = 'SilentlyContinue'

  - $env:PSModulePath += "$([System.IO.Path]::PathSeparator)vendor\dkml-runtime-distribution\windows"
  - Import-Module DeploymentVersion # Use the same $DV_ variables as 'installtime' scripts
  - Import-Module UnixInvokers      # Use Invoke-CygwinCommand and Invoke-MSYS2Command

  # ----------- Chocolatey --------------
  - |
    $oldeap = $ErrorActionPreference; $ErrorActionPreference = "SilentlyContinue";
    & where.exe choco 2> $null;
    $ErrorActionPreference = oldeap;
    if ($LastExitCode -ne 0) {
      if (Test-Path "C:\ProgramData\chocolatey\helpers\chocolateyProfile.psm1") {
        echo "The GitLab runner has Chocolatey but has not been restarted to reflect the new PATH. Will trigger a PowerShell session refresh until you have restarted it."
      } else {
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'));
      }
      Import-Module "C:\ProgramData\chocolatey\helpers\chocolateyProfile.psm1";
      refreshenv;
    } else {
      echo "Found Chocolatey";
    }
  - date

  # ----------- Curl -----------

  # curl is a built-in Powershell Alias. Want real curl.exe!
  - Remove-Item Alias:curl

  # ----------- release-cli -----------

  # https://docs.gitlab.com/ee/ci/yaml/index.html#release-cli-for-shell-executors
  - $EXTRASRC = "$PWD\_ci"
  - if (!(Test-Path "$EXTRASRC")) { New-Item -Path "$EXTRASRC" -ItemType Directory }
  - $RELCLI = "$EXTRASRC\releasecli"
  - if (!(Test-Path "$RELCLI")) { New-Item -Path "$RELCLI" -ItemType Directory }
  - if (!(Test-Path "$RELCLI\release-cli.exe")) { Invoke-WebRequest -Uri "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-windows-amd64.exe" -OutFile "$RELCLI\release-cli.exe" }
  - $env:PATH += ";$RELCLI"
  - release-cli -v
  - date

.before_setupmachine: &before-setupmachine
  # ----------- Visual Studio Detection -----------

  - Import-VSSetup -TempPath "$env:TEMP\vssetup"
  - $ExtraSetupMachineOpts = ""
  - if ("$env:SKIP_VISUAL_STUDIO_INSTALL" -eq "ON") { $ExtraSetupMachineOpts = "-SkipAutoInstallVsBuildTools"; Get-CompatibleVisualStudios -ErrorIfNotFound }

  # ----------- setup-machine.ps1 -----------
  # Timing: 15 seconds if nothing needs to be installed

  - installtime\windows\setup-machine.bat -SkipProgress -AllowRunAsAdmin $ExtraSetupMachineOpts
  - date

  - $CompatibleVisualStudios = Get-CompatibleVisualStudios -ErrorIfNotFound
  - $CompatibleVisualStudios
  - $ChosenVisualStudio = ($CompatibleVisualStudios | Select-Object -First 1)
  - $VisualStudioProps = Get-VisualStudioProperties -VisualStudioInstallation $ChosenVisualStudio
  - $VisualStudioProps
  - $VS_EXPORT_CMDS = "export DKML_COMPILE_SPEC=1; export DKML_COMPILE_TYPE=VS; export DKML_COMPILE_VS_DIR='$($VisualStudioProps.InstallPath)'; export DKML_COMPILE_VS_VCVARSVER='$($VisualStudioProps.VcVarsVer)'; export DKML_COMPILE_VS_WINSDKVER='$($VisualStudioProps.WinSdkVer)'; export DKML_COMPILE_VS_MSVSPREFERENCE='$($VisualStudioProps.MsvsPreference)'; export DKML_COMPILE_VS_CMAKEGENERATOR='$($VisualStudioProps.CMakeGenerator)'"

.before_msys2: &before-msys2
  # ----------- MSYS2 -----------
  # Timing: 5 minutes if MSYS2 needs to be installed
  # Inputs:
  #  $VS_EXPORT_CMDS - Optional. A string with `export DKML_COMPILE_SPEC=1; export DKML_COMPILE_TYPE=VS; export DKML_COMPILE_VS_DIR='...'; export DKML_COMPILE_VS_VCVARSVER='...'; export DKML_COMPILE_VS_WINSDKVER='...'; export DKML_COMPILE_VS_MSVSPREFERENCE='...'`

  # (Choco best practices: https://docs.chocolatey.org/en-us/choco/commands/#scripting-integration-best-practices-style-guide)
  - choco upgrade msys2 -y --no-progress --version="'20210604.0.0'" --params="'/NoPath /InstallDir:C:\msys64'"
  # msys starts a process in the background and waits on it. it also handles quoting.
  # msys_direct calls the shell command synchronously.
  - $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
  - if ($null -eq "$VS_EXPORT_CMDS" -or "" -eq "$VS_EXPORT_CMDS") { $VS_EXPORT_CMDS = "echo" }
  - |
    function msys_direct() {
      $path_unix = C:\msys64\usr\bin\cygpath --path "$env:PATH" ;
      C:\msys64\usr\bin\bash.exe @('-lc') + ("set -eufx -o pipefail; $VS_EXPORT_CMDS; PATH=`"`$PATH`":'${path_unix}'; " + $Args[0]);
    }
  - |
    function msys() {
      $path_unix = C:\msys64\usr\bin\cygpath --path "$env:PATH" ;
      Invoke-MSYS2Command -MSYS2Dir C:\msys64 -Command ("set -eufx -o pipefail; $VS_EXPORT_CMDS; PATH=`"`$PATH`":'${path_unix}'; " + $Args[0])
    }
  - msys_direct 'pacman -Sy --noconfirm --needed
      diffutils
      make
      patch
      rsync
      tar
      tree
      unzip
      wget
      zip'
  - msys_direct 'pacman --noconfirm -Scc'  # Cleans the entire package cache
  - taskkill /F /FI "MODULES eq msys-2.0.dll" # Stops any background services that pacman started, if any

.before_cygwin: &before-cygwin
  # ----------- Cygwin -----------

  # (Choco best practices: https://docs.chocolatey.org/en-us/choco/commands/#scripting-integration-best-practices-style-guide)
  - choco upgrade cyg-get -y --no-progress --version="'1.2.1'"
  - choco upgrade 7zip -y --no-progress --version="'19.0'"
  - refreshenv
  - cyg-get -help
  - cyg-get -debug `
      curl `
      jq `
      rsync `
      tar
  - Get-ItemProperty HKLM:\SOFTWARE\Cygwin\setup -Name rootdir
  - $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
  - |
    function cygwin() {
      $path_unix = c:\tools\cygwin\bin\cygpath --path "$env:PATH" ;
      Invoke-CygwinCommand -CygwinDir c:\tools\cygwin -Command ("cd '$PWD'; set -eufx -o pipefail; PATH=`"`$PATH`":'${path_unix}'; " + $Args[0])
    }

.windows:before-script-shared-cygwin:
  extends:
  - .shared_windows_runners
  before_script:
    - *before-windows
    - *before-cygwin

.windows:before-script-diskuv-cygwin:
  extends:
  - .diskuv_windows_runners
  before_script:
    - *before-windows
    - *before-cygwin

.windows:before-script-shared-setupmachine:
  extends:
  - .shared_windows_runners
  before_script:
    - *before-windows
    - *before-setupmachine

.windows:before-script-shared-msys2-setupmachine:
  extends:
  - .shared_windows_runners
  before_script:
    - *before-windows
    - *before-setupmachine
    - *before-msys2

.windows:before-script-diskuv-msys2-setupmachine:
  extends:
  - .diskuv_windows_runners
  before_script:
    - *before-windows
    - *before-setupmachine
    - *before-msys2
